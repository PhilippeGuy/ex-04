@charset "UTF-8";
/*!
Auteur: Eddy Martin
Description: Gabarit de base permettant d'explorer Sass et différents techniques CSS
Version: 1.0.0
License: GNU General Public License v2 or later

*/
/*--------------------------------------------------------------
>>> LISTE DES FICHIERS SCSS IMPORTÉS 
----------------------------------------------------------------
# Variables
# Mixin
# Extend
# Layout
# Element
# entete
# Menu
# Pied-page
----------------------------------------------------------------
# Variables
--------------------------------------------------------------*/
/* ------------------------------------------------------------
# Mixin 
--------------------------------------------------------------*/
/* ----------------------------------------- */
/* ------  Un premier exemple de mixin ----- */
/* ----------------------------------------- */
/* ---------------------------------------- */
/* ---------------------------------------- */
.modal-background {
  bottom: 0;
  left: 0;
  position: absolute;
  right: 0;
  top: 0;
  background: black;
  opacity: 0.9;
}

/*
  Le resultat CSS produit par SCSS

  .modal-background {
        bottom: 0;
        left: 0;
        position: absolute;
        right: 0;
        top: 0;
        background: black;
        opacity: 0.9;
}

*/
/* ---------------------------------------------------------------------------------------------------------------------
Réutilisabilité
------------------------------------------------------------------------------------------------------------------------
Le but principal d'un mixin est de rendre un ensemble de propriétés réutilisables.
Comme les variables Sass (où vous définissez vos valeurs sur un seul emplacement), 
les mixins Sass vous permettent de définir des propriétés sur un seul emplacement.
Le mixin précédent peut être réutilisé dans d'autres règles:
------------------------------------------------------------------------------------------------------------------------ */
.modal-background {
  bottom: 0;
  left: 0;
  position: absolute;
  right: 0;
  top: 0;
}

.product-link {
  bottom: 0;
  left: 0;
  position: absolute;
  right: 0;
  top: 0;
}

.image-pattern {
  bottom: 0;
  left: 0;
  position: absolute;
  right: 0;
  top: 0;
}

/* ------------------------------------------------------------------------------  
Paramètres
--------------------------------------------------------------------------------- 
Les mixins étant des fonctions on peut y intégrer des paramètres, 
Par exemple, on peut généraliser la propriété border-radius pour 
l'adapter à plusieurs navigateurs.
-------------------------------------------------------------------------------- */
.box {
  border-radius: 3px;
}

/*----------------------------------------------------------------------------------- 
Paramètres facultatifs
-------------------------------------------------------------------------------------
Si vous souhaitez qu'un paramètre ait une valeur par défaut tout en offrant la possibilité
d'en définir un occasionnellement, vous pouvez créer des paramètres facultatifs:
------------------------------------------------------------------------------------- */
/* Utilisation du mixin */
div.highlighter-rouge {
  position: relative;
}

div.highlighter-rouge:before {
  background: #aaa;
  color: rgba(0, 0, 0, 0.5);
  content: "Code";
  display: inline-block;
  font-size: 0.6rem;
  font-weight: 700;
  height: 1rem;
  left: 0;
  letter-spacing: 0.1em;
  line-height: 1rem;
  padding: 0 0.5em;
  position: absolute;
  text-transform: uppercase;
  top: 0;
}

div.highlighter-rouge.css {
  position: relative;
}

div.highlighter-rouge.css:before {
  background: #0ff;
  color: white;
  content: "CSS";
  display: inline-block;
  font-size: 0.6rem;
  font-weight: 700;
  height: 1rem;
  left: 0;
  letter-spacing: 0.1em;
  line-height: 1rem;
  padding: 0 0.5em;
  position: absolute;
  text-transform: uppercase;
  top: 0;
}

div.highlighter-rouge.scss {
  position: relative;
}

div.highlighter-rouge.scss:before {
  background: #c69;
  color: white;
  content: "SCSS";
  display: inline-block;
  font-size: 0.6rem;
  font-weight: 700;
  height: 1rem;
  left: 0;
  letter-spacing: 0.1em;
  line-height: 1rem;
  padding: 0 0.5em;
  position: absolute;
  text-transform: uppercase;
  top: 0;
}

/*
    Permet de définir un pseudo élément
*/
/*
    Voici un exemple d'utilisation sans aucun argument 
    (vous verrez également ce mixin utilisé dans certains de nos 
    autres mixins ci-dessous également).
*/
div.mon_pseudo {
  display: block;
  width: 50px;
  height: 50px;
  border: 1px solid #aaa;
}

div.mon_pseudo::after {
  content: "";
  display: block;
  position: absolute;
  top: -1rem;
  left: -1rem;
  width: 1rem;
  height: 1rem;
  background-color: #0f0;
}

/*
Ce mixin élimine tous les tracas de la création d'un HTML/CSS triangle 
que vous verrez  apparaître dans la plupart des info-bulles traditionnelles, 
le tout sans images, vous spécifiez simplement sa couleur, la taille que vous voulez, 
la direction vers laquelle il pointera et c'est fait!
*/
.mon_triangle {
  content: "";
  display: block;
  position: absolute;
  width: 0;
  height: 0;
  border-top: 10px solid transparent;
  border-bottom: 10px solid transparent;
  border-left: 10px solid #0f0;
  margin-right: -10px;
}

/* ------------------------------------------------------------------------------ */
/*  @content                                                                      */
/* ------------------------------------------------------------------------------ */
/* @content permet l'extension d'un Mixin. Nous pouvons passer un bloc de code css
   à un Mixins avec l'utilisation de @content. En bref, @content rend cela possible.

   grid() est un mixin qu'on va étendre avec @content
*/
/* @content permet d'intégrer du code de plus */
/*
Et maintenant, notre grille Mixin peut prendre du code CSS intégré. 
Un exemple de cas d'utilisation est celui des media queries. 
Voici un exemple
*/
/* ------------------------------------------------------------
# Extend 
--------------------------------------------------------------*/
/* ------------------------------------------------------------------------------ */
/* @extend  
/* ------------------------------------------------------------------------------ */
/* Un  @extend permet d'hériter des propriétés CSS d'un autre sélecteur           */
/* ------------------------------------------------------------------------------ */
.small-uppercase, .modal-background, .product-link, .image-pattern {
  color: lightslategrey;
  font-size: 10px;
  letter-spacing: 0.1em;
  line-height: 12px;
  text-transform: uppercase;
}

/*
  .small-uppercase,
  .modal-background,
  .product-link,
  .image-pattern{
    color: lightslategrey;
    font-size: 10px;
    letter-spacing: 0.1em;
    line-height: 12px;
    text-transform: uppercase;
  }
  */
/* ---------------------------------------------------------------------------- */
/* Différence avec les mixins                                                   */
/* ---------------------------------------------------------------------------- */
/* 
Il y a 2 différences:
La règle @extend n'a pas de paramètres. Les mixins en ont.
La règle @extend combine des sélecteurs. Les mixins non.
*/
/*
La liste des propriétés est simplement répétée autant de fois que le 
@include small-uppercase () est appelé.

Un  @extend est plus efficace, car il n'écrit les propriétés 
communes qu'une seule fois.
On peut optimiser @extend avec un «placeholder»
en précédent notre extension avec «%»
*/
.modal-background, .product-link, .image-pattern {
  color: lightslategrey;
  font-size: 10px;
  letter-spacing: 0.1em;
  line-height: 12px;
  text-transform: uppercase;
}

.modal-background,
.product-link,
.image-pattern {
  color: lightslategrey;
  font-size: 10px;
  letter-spacing: 0.1em;
  line-height: 12px;
  text-transform: uppercase;
}

#checkMenu, #checkRecherche {
  display: none;
}

.cour {
  border-radius: 15pt;
  border: solid 3px black;
  margin: 5px;
  color: white;
}

/* ------------------------------------------------------------
# Layout
--------------------------------------------------------------*/
body {
  font-family: 'Roboto', sans-serif;
}

main {
  display: -ms-grid;
  display: grid;
  -ms-grid-columns: 0.08fr (1fr)[5];
      grid-template-columns: 0.08fr repeat(5, 1fr);
  grid-auto-rows: minmax(50px, auto);
      grid-template-areas: ". jour jour jour jour jour" "heure . . . . ." "heure . . . . ." "heure . . . . ." "heure . . . . ." "heure . . . . ." "heure . . . . ." "heure . . . . ." "heure . . . . ." "heure . . . . ." "heure . . . . ." "heure . . . . .";
  text-align: center;
}

#horaire div:nth-child(1) {
  -ms-grid-column: 2;
  grid-column: 2;
}

#horaire div:nth-child(2) {
  -ms-grid-column: 3;
  grid-column: 3;
}

#horaire div:nth-child(3) {
  -ms-grid-column: 4;
  grid-column: 4;
}

#horaire div:nth-child(4) {
  -ms-grid-column: 5;
  grid-column: 5;
}

#horaire div:nth-child(5) {
  -ms-grid-column: 6;
  grid-column: 6;
}

.heure {
  -ms-grid-column: 1;
  grid-column: 1;
  place-self: center;
}

.etude {
  background-color: #ce4040;
}

.veille {
  background-color: #e9ab01;
}

.video {
  background-color: #3498db;
}

div.lundi.etude {
  -ms-grid-row: 7;
  -ms-grid-row-span: 5;
  -ms-grid-column: 2;
  -ms-grid-column-span: 1;
  grid-area: 7 / 2 / 12/ 3;
}

div.mardi.veille {
  -ms-grid-row: 8;
  -ms-grid-row-span: 4;
  -ms-grid-column: 3;
  -ms-grid-column-span: 1;
  grid-area: 8 / 3 / 12/ 4;
}

div.mercredi.video {
  -ms-grid-row: 7;
  -ms-grid-row-span: 3;
  -ms-grid-column: 4;
  -ms-grid-column-span: 1;
  grid-area: 7 / 4 / 10/ 5;
}

div.jeudi.etude {
  -ms-grid-row: 2;
  -ms-grid-row-span: 4;
  -ms-grid-column: 5;
  -ms-grid-column-span: 1;
  grid-area: 2 / 5 / 6/ 6;
}

div.jeudi.veille {
  -ms-grid-row: 8;
  -ms-grid-row-span: 4;
  -ms-grid-column: 5;
  -ms-grid-column-span: 1;
  grid-area: 8 / 5 / 12/ 6;
}

div.jeudi.veille {
  -ms-grid-row: 8;
  -ms-grid-row-span: 4;
  -ms-grid-column: 5;
  -ms-grid-column-span: 1;
  grid-area: 8 / 5 / 12/ 6;
}

div.vendredi.video {
  -ms-grid-row: 7;
  -ms-grid-row-span: 3;
  -ms-grid-column: 6;
  -ms-grid-column-span: 1;
  grid-area: 7 / 6 / 10/ 7;
}

/* ------------------------------------------------------------
# entete
--------------------------------------------------------------*/
#entete {
  background-color: #250e0e;
  color: white;
  text-align: right;
  padding: 0 30px;
}

/* ------------------------------------------------------------
# Pied-page 
----------------------------------------------------------------*/
/*# sourceMappingURL=style.css.map */